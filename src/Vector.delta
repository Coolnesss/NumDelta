class Vector<T> {

  var array : Array<T>;

  init(array : T[]&) {
    this.array = Array<T>();

    for (e in 0..array.count) {
      this.array.append(array[e]);
    }
  }

  init(array : Vector<T>&) {
    this.array = Array<T>();

    for (e in 0..array.size()) {
      this.array.append(*array[e]);
    }
  }

  init(array : Array<T>&) {
    this.array = *array;
  }

  init() {
    this.array = Array<T>();
  }

  // TODO replace with T 
  mutating func [](x: int) -> mutable T& {
    return this.array[x];
  }

  func size() -> int {
    return this.array.size();
  }
}

func *(a: Vector<T>&, b: Vector<T>&) -> Vector<T> {
  var ret = Vector<T>(a);

  // TODO throw error if sizes aren't the same
  for (i in 0..a.size()) {
    ret[i] = ret[i] * b[i];
  }
  
  return Vector<T>(&ret);
}
